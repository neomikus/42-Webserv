[1m/proyecto/src/classes/Location.cpp:303:14: [31mstyle:[39m The scope of the variable 'colors' can be reduced. [variableScope][0m
 const char *colors[4] = {HBLU, HGRE, HMAG, HRED};
             ^
[1m/proyecto/src/classes/Location.cpp:304:14: [31mstyle:[39m Variable 'cgiStr' can be declared with const [constVariable][0m
 std::string cgiStr[5] = {"BASH", "PHP", "PYTHON", "GO", "NONE"};
             ^
[1m/proyecto/src/classes/Location.cpp:340:107: [31mperformance:[39m Prefer prefix ++/-- operators for non-primitive types. [postfixOperator][0m
   for (std::vector<int>::const_iterator it_catch = it->to_catch.begin(); it_catch != it->to_catch.end(); it_catch++)
                                                                                                          ^
[1m/proyecto/src/classes/LocationOld.cpp:131:14: [31mstyle:[39m Variable 'cgiStr' can be declared with const [constVariable][0m
 std::string cgiStr[5] = {"BASH", "PHP", "PYTHON", "GO", "NONE"};
             ^
[1m/proyecto/src/classes/LocationOld.cpp:164:107: [31mperformance:[39m Prefer prefix ++/-- operators for non-primitive types. [postfixOperator][0m
   for (std::vector<int>::const_iterator it_catch = it->to_catch.begin(); it_catch != it->to_catch.end(); it_catch++)
                                                                                                          ^
[1m/proyecto/src/classes/ServerOld.cpp:269:107: [31mperformance:[39m Prefer prefix ++/-- operators for non-primitive types. [postfixOperator][0m
   for (std::vector<int>::const_iterator it_catch = it->to_catch.begin(); it_catch != it->to_catch.end(); it_catch++)
                                                                                                          ^
[1m/proyecto/src/connections/Post.cpp:83:5: [31mwarning:[39m Return value of function fb.open() is not used. [ignoredReturnValue][0m
 fb.open(resource.substr(1).c_str(), std::ios::out);
    ^
[1m/proyecto/src/connections/Request.cpp:189:41: [31mstyle:[39m Same expression on both sides of '&&'. [duplicateExpression][0m
  method != "GET" && method != "DELETE" && method != "PUT")
                                        ^
[1m/proyecto/src/connections/Request.cpp:151:39: [31mstyle:[39m Parameter 'method' can be declared with const [constParameter][0m
bool checkAllowedMethods(std::string &method, allowed_methods methods) {
                                      ^
[1m/proyecto/src/connections/Request.cpp:246:67: [31merror:[39m Dereference of an invalid iterator: str.begin()-1 [derefInvalidIterator][0m
 for (std::string::iterator it = str.end() - 1; it != str.begin() - 1; --it)
                                                                  ^
[1m/proyecto/src/connections/Request.cpp:167:89: [31mperformance:[39m Prefer prefix ++/-- operators for non-primitive types. [postfixOperator][0m
  for (std::vector<hostport>::iterator it2 = hostports.begin(); it2 != hostports.end(); it2++) {
                                                                                        ^
[1m/proyecto/src/connections/Request.cpp:207:90: [31mperformance:[39m Prefer prefix ++/-- operators for non-primitive types. [postfixOperator][0m
  for (std::vector<int>::iterator it2 = it->to_catch.begin(); it2 != it->to_catch.end(); it2++) {
                                                                                         ^
[1m/proyecto/src/connections/connections.cpp:76:7: [31mstyle:[39m Variable 'req' is reassigned a value before the old one has been used. [redundantAssignment][0m
  req = new Get(splitedResponse);
      ^
[1m/proyecto/src/connections/connections.cpp:72:7: [2mnote:[0m req is assigned
  req = new Request(splitedResponse);
      ^
[1m/proyecto/src/connections/connections.cpp:76:7: [2mnote:[0m req is overwritten
  req = new Get(splitedResponse);
      ^
[1m/proyecto/src/files/File.cpp:65:49: [31mperformance:[39m Function parameter 'str' should be passed by const reference. [passedByValue][0m
File &operator<<(File &model, const std::string str) {
                                                ^
[1m/proyecto/src/main/main.cpp:38:89: [31mperformance:[39m Prefer prefix ++/-- operators for non-primitive types. [postfixOperator][0m
  for (std::vector<hostport>::iterator it2 = _hostport.begin(); it2 != _hostport.end(); it2++) {
                                                                                        ^
[1m/proyecto/src/utils/strUtils.cpp:15:37: [31mperformance:[39m Function parameter 'str' should be passed by const reference. [passedByValue][0m
size_t countWords(std::string const str) {
                                    ^
[1m/proyecto/src/utils/strUtils.cpp:21:35: [31mperformance:[39m Function parameter 'str' should be passed by const reference. [passedByValue][0m
bool strIsDigit(std::string const str)
                                  ^
[1m/proyecto/src/utils/strUtils.cpp:55:33: [31mperformance:[39m Function parameter 'str' should be passed by const reference. [passedByValue][0m
std::string strTrim(std::string str) {return(rtrim(ltrim(str)));
                                ^
[1m/proyecto/src/utils/strUtils.cpp:85:33: [31mperformance:[39m Function parameter 'str' should be passed by const reference. [passedByValue][0m
std::string strTrim(std::string str, char delimiter) {return(rtrim(ltrim(str, delimiter), delimiter));
                                ^
[1m/proyecto/src/utils/strUtils.cpp:44:67: [31merror:[39m Dereference of an invalid iterator: str.begin()-1 [derefInvalidIterator][0m
 for (std::string::iterator it = str.end() - 1; it != str.begin() - 1; --it)
                                                                  ^
[1m/proyecto/src/utils/strUtils.cpp:74:67: [31merror:[39m Dereference of an invalid iterator: str.begin()-1 [derefInvalidIterator][0m
 for (std::string::iterator it = str.end() - 1; it != str.begin() - 1; --it)
                                                                  ^
[1m/proyecto/src/connections/Request.cpp:124:0: [31mstyle:[39m The function 'getBodySize' is never used. [unusedFunction][0m

^
[1mnofile:0:0: [31minformation:[39m Cppcheck cannot find all the include files (use --check-config for details) [missingInclude][0m

